name: CI

on:
  pull_request:
  push:
    branches: master

jobs:
  setup:
    name: Define CI matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cfg:
          - data:
              - name: ubuntu-20.04
                tier: 1
                platform: Ubuntu 20.04
                build_os: ubuntu-20.04-8cores
                test_os: ubuntu-20.04
                host: x86_64-pc-linux-gnu

              - name: ubuntu-22.04
                tier: 3
                platform: Ubuntu 22.04
                build_os: ubuntu-22.04-8cores
                test_os: ubuntu-22.04
                host: x86_64-pc-linux-gnu

              - name: macos-11
                tier: 3
                platform: macOS Big Sur 11
                build_os: macos-11
                test_os: macos-11
                brew_deps: >
                  autoconf
                  automake
                  coreutils
                  libtool
                  pkgconfig
                host: x86_64-apple-darwin

              - name: mingw32
                tier: 3
                platform: Windows (64-bit MinGW)
                build_os: ubuntu-22.04-8cores
                test_os: windows-latest
                cross_deps: >
                  mingw-w64
                host: x86_64-w64-mingw32
                file_ext: ".exe"

              - name: aarch64-linux
                tier: 3
                platform: ARM64 Linux
                build_os: ubuntu-22.04-8cores
                cross_deps: >
                  g++-aarch64-linux-gnu
                host: aarch64-linux-gnu

    outputs:
      build_matrix: ${{ steps.set-setup.outputs.build_matrix }}
      test_matrix: ${{ steps.set-setup.outputs.test_matrix }}
      rpc_test_matrix: ${{ steps.set-setup.outputs.rpc_test_matrix }}
      rpc_test_names: ${{ steps.set-setup.outputs.rpc_test_names }}
      test_names: ${{ steps.set-setup.outputs.test_names }}
      rpc_tests: ${{ steps.set-rpc-tests.outputs.rpc_tests }}

    steps:
      - uses: actions/checkout@v4

      - id: set-rpc-tests
        run: |
          cat <<EOF > ./subclass.py
          import subprocess
          import importlib
          import sys
          import os
          sys.path.append('qa/pull-tester')
          rpc_tests = importlib.import_module('rpc-tests')

          src_dir = os.environ["SRC_DIR"]
          build_dir = '.'
          exeext = ''

          test_list = rpc_tests.SERIAL_SCRIPTS + rpc_tests.BASE_SCRIPTS + rpc_tests.ZMQ_SCRIPTS
          print(test_list)
          EOF
          RPC_LIST=$(SRC_DIR=$(pwd) python3 ./subclass.py)
          RPC_LIST_JSON=$(echo "$RPC_LIST" | sed "s/'/\"/g" | jq -c .)
          echo "rpc_tests=$RPC_LIST_JSON" >> $GITHUB_OUTPUT

      - id: set-setup
        env:
          CFG: ${{ toJSON(matrix.cfg) }}
        run: |
          jq -r -n 'env.CFG | fromjson | @json "build_matrix=\(.data)"' >> $GITHUB_OUTPUT
          jq -r -n 'env.CFG | fromjson | [.data[] | select(.test_os)] | @json "test_matrix=\(.)"' >> $GITHUB_OUTPUT
          jq -r -n 'env.CFG | fromjson | [.data[] | select(.test_os) | .name] | @json "test_names=\(.)"' >> $GITHUB_OUTPUT
          jq -r -n 'env.CFG | fromjson | [.data[] | select(.test_os and .tier == 1) | .name] | @json "rpc_test_names=\(.)"' >> $GITHUB_OUTPUT
          jq -r -n 'env.CFG | fromjson | [.data[] | select(.test_os and .tier == 1)] | @json "rpc_test_matrix=\(.)"' >> $GITHUB_OUTPUT

      - name: download sprout-groth16.params
        run: |
          mkdir zcash-params
          cd zcash-params
          wget -c https://download.z.cash/downloads/sprout-groth16.params

      - uses: actions/cache/save@v3
        name: cache-zcash-params
        with:
          enableCrossOsArchive: true
          path: zcash-params
          key: zcash-params

  build:
    name: Build tier ${{ matrix.tier }} platform ${{ matrix.platform }}
    needs: setup
    runs-on: ${{ matrix.build_os }}
    continue-on-error: ${{ matrix.tier == 3 }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.build_matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Homebrew build dependencies
        if: matrix.brew_deps != ''
        run: brew install ${{ matrix.brew_deps }}

      - name: Install cross-compilation build dependencies
        if: matrix.cross_deps != ''
        run: sudo apt update && sudo apt install ${{ matrix.cross_deps }}

      - name: Configure MinGW to use POSIX variant
        if: matrix.name == 'mingw32'
        run: |
          sudo update-alternatives --set x86_64-w64-mingw32-gcc $(update-alternatives --query x86_64-w64-mingw32-gcc | grep Alternative | grep posix | cut -d' ' -f2)
          sudo update-alternatives --set x86_64-w64-mingw32-g++ $(update-alternatives --query x86_64-w64-mingw32-g++ | grep Alternative | grep posix | cut -d' ' -f2)

      - name: Cache built dependencies
        uses: actions/cache@v3
        with:
          enableCrossOsArchive: true
          path: depends/built
          key: ${{ matrix.name }}-built-${{ hashFiles('depends/Makefile', 'depends/funcs.mk') }}-${{ hashFiles('depends/packages/*.mk', 'depends/patches/**/*') }}
          restore-keys: |
            ${{ matrix.name }}-built-${{ hashFiles('depends/Makefile', 'depends/funcs.mk') }}-

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: bash
        run: echo "timestamp=$(date +'%Y-%m-%d-%H;%M;%S')" >> "$GITHUB_OUTPUT"

      - name: Cache ccache files
        uses: actions/cache@v3
        with:
          enableCrossOsArchive: true
          path: ${{ runner.os == 'macOS' && '~/Library/Caches/ccache' || '~/.cache/ccache' }}
          key: ${{ matrix.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ matrix.name }}-ccache-

      - name: Get the number of available processing cores
        id: nproc
        shell: bash
        run: echo "count=$(nproc 2> /dev/null || sysctl -n hw.logicalcpu)" >> "$GITHUB_OUTPUT"

      - name: Build zcashd
        id: build
        run: >
          HOST=${{ matrix.host }}
          ./zcutil/build.sh
          -j"${{ steps.nproc.outputs.count }}"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Upload depends/${{ matrix.host }}/src/test/buildenv.py
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ./src/test/buildenv.py
          destination: gh-zcash/${{ github.run_id }}/${{ matrix.name }}/src/test

      - name: Upload depends/${{ matrix.host }}/src/secp256k1
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ./src/secp256k1
          destination: gh-zcash/${{ github.run_id }}/${{ matrix.name }}/src

      - name: Upload depends/${{ matrix.host }}/src/univalue
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ./src/univalue
          destination: gh-zcash/${{ github.run_id }}/${{ matrix.name }}/src

      - name: Upload depends/${{ matrix.host }}/native/bin
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ./depends/${{ matrix.host }}/native/bin
          destination: gh-zcash/${{ github.run_id }}/${{ matrix.name }}/depends/${{ matrix.host }}/native

      - name: Upload depends/${{ matrix.host }}/native/lib
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ./depends/${{ matrix.host }}/native/lib
          destination: gh-zcash/${{ github.run_id }}/${{ matrix.name }}/depends/${{ matrix.host }}/native

      - name: Upload depends/${{ matrix.host }}/lib
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ./depends/${{ matrix.host }}/lib
          destination: gh-zcash/${{ github.run_id }}/${{ matrix.name }}/depends/${{ matrix.host }}

      - name: Upload src/bench/bench_bitcoin artifact
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ./${{ format('src/bench/bench_bitcoin{0}', matrix.file_ext) }}
          destination: gh-zcash/${{ github.run_id }}/${{ matrix.name }}/src/bench

      - name: Upload src/zcash-inspect artifact
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ./${{ format('src/zcash-inspect{0}', matrix.file_ext) }}
          destination: gh-zcash/${{ github.run_id }}/${{ matrix.name }}/src

      - name: Upload zcashd-wallet-tool artifact
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ./${{ format('src/zcashd-wallet-tool{0}', matrix.file_ext) }}
          destination: gh-zcash/${{ github.run_id }}/${{ matrix.name }}/src

      - name: Upload zcash-tx artifact
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ./${{ format('src/zcash-tx{0}', matrix.file_ext) }}
          destination: gh-zcash/${{ github.run_id }}/${{ matrix.name }}/src

      - name: Upload zcash-gtest artifact
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ./${{ format('src/zcash-gtest{0}', matrix.file_ext) }}
          destination: gh-zcash/${{ github.run_id }}/${{ matrix.name }}/src

      - name: Upload zcash-btest artifact
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ./${{ format('src/test/test_bitcoin{0}', matrix.file_ext) }}
          destination: gh-zcash/${{ github.run_id }}/${{ matrix.name }}/src/test

      - name: Upload zcashd artifact
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ./${{ format('src/zcashd{0}', matrix.file_ext) }}
          destination: gh-zcash/${{ github.run_id }}/${{ matrix.name }}/src

      - name: Upload zcash-cli artifact
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ./${{ format('src/zcash-cli{0}', matrix.file_ext) }}
          destination: gh-zcash/${{ github.run_id }}/${{ matrix.name }}/src

  bitrot:
    name: Bitrot check tier ${{ matrix.tier }} platform ${{ matrix.platform }}
    needs: [setup, build]
    runs-on: ${{ matrix.build_os }}
    continue-on-error: ${{ matrix.tier == 3 }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.build_matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Homebrew build dependencies
        if: matrix.brew_deps != ''
        run: brew install ${{ matrix.brew_deps }}

      - name: Install cross-compilation build dependencies
        if: matrix.cross_deps != ''
        run: sudo apt update && sudo apt install ${{ matrix.cross_deps }}

      - name: Configure MinGW to use POSIX variant
        if: matrix.name == 'mingw32'
        run: |
          sudo update-alternatives --set x86_64-w64-mingw32-gcc $(update-alternatives --query x86_64-w64-mingw32-gcc | grep Alternative | grep posix | cut -d' ' -f2)
          sudo update-alternatives --set x86_64-w64-mingw32-g++ $(update-alternatives --query x86_64-w64-mingw32-g++ | grep Alternative | grep posix | cut -d' ' -f2)

      - name: Cache built dependencies
        uses: actions/cache@v3
        with:
          enableCrossOsArchive: true
          path: depends/built
          key: ${{ matrix.name }}-built-${{ hashFiles('depends/Makefile', 'depends/funcs.mk') }}-${{ hashFiles('depends/packages/*.mk', 'depends/patches/**/*') }}
          restore-keys: |
            ${{ matrix.name }}-built-${{ hashFiles('depends/Makefile', 'depends/funcs.mk') }}-

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: bash
        run: echo "timestamp=$(date +'%Y-%m-%d-%H;%M;%S')" >> "$GITHUB_OUTPUT"

      - name: Cache ccache files
        uses: actions/cache@v3
        with:
          enableCrossOsArchive: true
          path: ${{ runner.os == 'macOS' && '~/Library/Caches/ccache' || '~/.cache/ccache' }}
          key: ${{ matrix.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ matrix.name }}-ccache-

      - name: Get the number of available processing cores
        id: nproc
        shell: bash
        run: echo "count=$(nproc 2> /dev/null || sysctl -n hw.logicalcpu)" >> "$GITHUB_OUTPUT"

      - name: Build zcashd with libraries enabled
        run: >
          CONFIGURE_FLAGS="--with-libs"
          HOST=${{ matrix.host }}
          ./zcutil/build.sh
          -j"${{ steps.nproc.outputs.count }}"

      - name: Build zcashd with wallet disabled
        run: >
          CONFIGURE_FLAGS="--disable-wallet"
          HOST=${{ matrix.host }}
          ./zcutil/build.sh
          -j"${{ steps.nproc.outputs.count }}"

      - name: Build zcashd with mining disabled
        run: >
          CONFIGURE_FLAGS="--disable-mining"
          HOST=${{ matrix.host }}
          ./zcutil/build.sh
          -j"${{ steps.nproc.outputs.count }}"

  test-btest:
    name: Boost.Test tier ${{ matrix.tier }} platform ${{ matrix.platform }}
    needs: [setup, build]
    runs-on: ${{ matrix.test_os }}
    continue-on-error: ${{ matrix.tier != 1 }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.test_matrix) }}
    steps:
      - uses: actions/checkout@v4
      - name: "Set up Cloud SDK"
        if: runner.os != 'Linux'
        uses: "google-github-actions/setup-gcloud@v2"
        with:
          version: ">= 363.0.0"

      - name: Download artifact
        shell: bash
        run: |
          ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} ${{ format('src/test/test_bitcoin{0}', matrix.file_ext) }} ./src/test/
          ls -la
          ls -la src/test/
          pwd

      - name: Make artifact executable
        if: runner.os != 'Windows'
        run: chmod +x ${{ format('./src/test/test_bitcoin{0}', matrix.file_ext) }}

      - name: Run Boost.Tests
        shell: bash
        run: |
          ${{ format('./src/test/test_bitcoin{0}', matrix.file_ext) }} -p

  test-gtest:
    name: GoogleTest tier ${{ matrix.tier }} platform ${{ matrix.platform }} - shard ${{ matrix.gtest_shards }}
    needs: [setup, build]
    runs-on: ${{ matrix.test_os }}
    continue-on-error: ${{ matrix.tier != 1 }}
    strategy:
      matrix:
        name: ${{ fromJson(needs.setup.outputs.test_names) }}
        shard_index: [0, 1]
        include: ${{ fromJson(needs.setup.outputs.test_matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: "Set up Cloud SDK"
        if: runner.os != 'Linux'
        uses: "google-github-actions/setup-gcloud@v2"
        with:
          version: ">= 363.0.0"


      - name: Download artifact
        shell: bash
        run: |
          ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} ${{ format('src/zcash-gtest{0}', matrix.file_ext) }} ./

      - name: Make artifact executable
        if: runner.os != 'Windows'
        run: chmod +x ${{ format('./zcash-gtest{0}', matrix.file_ext) }}

      - name: Get Sprout parameters
        uses: actions/cache/restore@v3
        with:
          enableCrossOsArchive: true
          path: zcash-params
          key: zcash-params

      - name: Setup zcash-params
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            mv zcash-params "$APPDATA/ZcashParams"
          elif [ "${{ runner.os }}" == "macOS" ]; then
            mv zcash-params "$HOME/Library/Application Support/ZcashParams"
          elif [ "${{ runner.os }}" == "Linux" ]; then
            mv zcash-params "$HOME/.zcash-params"
          fi

      - name: Run GoogleTests
        shell: bash
        env:
          GTEST_TOTAL_SHARDS: 2
          GTEST_SHARD_INDEX: ${{ matrix.shard_index }}
        run: ${{ format('./zcash-gtest{0}', matrix.file_ext) }}

# not designed for Windows # (disabled to save costs)
  univalue:
    name: univalue tier ${{ matrix.tier }} platform ${{ matrix.platform }}
    needs: [setup, build]
    runs-on: ${{ matrix.test_os }}
    continue-on-error: ${{ matrix.tier != 1 }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.test_matrix) }}
    steps:
      - uses: actions/checkout@v4
        if: runner.os != 'Windows' # (disabled to save costs)

      - name: 'Set up Cloud SDK'
        if: runner.os != 'Linux' && runner.os != 'Windows' # (disabled to save costs)
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'


      - name: Download artifact
        shell: bash
        if: runner.os != 'Windows' # (disabled to save costs)
        run: |
         ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} depends/${{ matrix.host }}/native/bin ./depends/${{ matrix.host }}/native/

         ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} src/univalue ./src/

      - name: Make artifact executable
        if: runner.os != 'Windows'
        run: |
          chmod +x ./src/univalue/build-aux/install-sh

      - name: Run univalue test
        shell: bash
        if: runner.os != 'Windows' # (disabled to save costs)
        run: >
          SRC_DIR=$(pwd)
          HOST=${{ matrix.host }}
          python3 ./qa/zcash/full_test_suite.py univalue

# not designed for Windows # (disabled to save costs)
  secp256k1:
    name: secp256k1 tier ${{ matrix.tier }} platform ${{ matrix.platform }}
    needs: [setup, build]
    runs-on: ${{ matrix.test_os }}
    continue-on-error: ${{ matrix.tier != 1 }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.test_matrix) }}
    steps:
      - uses: actions/checkout@v4
        if: runner.os != 'Windows' # (disabled to save costs)

      - name: 'Set up Cloud SDK'
        if: runner.os != 'Linux' && runner.os != 'Windows' # (disabled to save costs)
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'


      - name: Download artifact
        shell: bash
        if: runner.os != 'Windows' # (disabled to save costs)
        run: |
         ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} depends/${{ matrix.host }}/native/bin ./depends/${{ matrix.host }}/native/

         ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} src/secp256k1 ./src/

      - name: Run secp256k1 test
        shell: bash
        if: runner.os != 'Windows' # (disabled to save costs)
        run: >
          SRC_DIR=$(pwd)
          HOST=${{ matrix.host }}
          python3 ./qa/zcash/full_test_suite.py secp256k1

# not designed for Windows # (disabled to save costs)
  util-test:
    name: util-test tier ${{ matrix.tier }} platform ${{ matrix.platform }}
    needs: [setup, build]
    runs-on: ${{ matrix.test_os }}
    continue-on-error: ${{ matrix.tier != 1 }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.test_matrix) }}
    steps:
      - uses: actions/checkout@v4
        if: runner.os != 'Windows' # (disabled to save costs)

      - name: 'Set up Cloud SDK'
        if: runner.os != 'Linux' && runner.os != 'Windows' # (disabled to save costs)
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'


      - name: Download artifact
        shell: bash
        if: runner.os != 'Windows' # (disabled to save costs)
        run: |
         ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} ${{ format('src/zcash-tx{0}', matrix.file_ext) }} ./src/

         ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} src/test/buildenv.py ./src/test/

      - name: Make artifact executable
        if: runner.os != 'Windows' # (disabled to save costs)
        run: |
          chmod +x ${{ format('./src/zcash-tx{0}', matrix.file_ext) }}

      - name: Run util-test test
        shell: bash
        if: runner.os != 'Windows' # (disabled to save costs)
        run: >
          SRC_DIR=$(pwd)
          HOST=${{ matrix.host }}
          python3 ./qa/zcash/full_test_suite.py util-test

  no-dot-so:
    name: not-dot-so tier ${{ matrix.tier }} platform ${{ matrix.platform }}
    needs: [setup, build]
    runs-on: ${{ matrix.test_os }}
    continue-on-error: ${{ matrix.tier != 1 }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.test_matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: 'Set up Cloud SDK'
        if: runner.os != 'Linux'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'


      - name: Download artifact
        shell: bash
        run: |
          ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} depends/${{ matrix.host }}/lib ./depends/${{ matrix.host }}/
        
      - name: Run no-dot-so test
        shell: bash
        run: >
          SRC_DIR=$(pwd)
          HOST=${{ matrix.host }}
          python3 ./qa/zcash/full_test_suite.py no-dot-so

# Not designed for Windows # (disabled to save costs)
  rust-test:
    name: rust-test tier ${{ matrix.tier }} platform ${{ matrix.platform }}
    needs: [setup, build]
    runs-on: ${{ matrix.test_os }}
    continue-on-error: ${{ matrix.tier != 1 }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.test_matrix) }}
    steps:
      - uses: actions/checkout@v4
        if: runner.os != 'Windows' # (disabled to save costs)

      - name: 'Set up Cloud SDK'
        if: runner.os != 'Linux' && runner.os != 'Windows' # (disabled to save costs)
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'


      - name: Download artifact
        if: runner.os != 'Windows' # (disabled to save costs)
        shell: bash
        run: |
          ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} depends/${{ matrix.host }}/native/lib ./depends/${{ matrix.host }}/native/

          ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} depends/${{ matrix.host }}/native/bin ./depends/${{ matrix.host }}/native/
        
      - name: Make artifact executable
        if: runner.os != 'Windows' # (disabled to save costs)
        run: |
          chmod +x ./depends/${{ matrix.host }}/native/bin/rustc
          chmod +x ./depends/${{ matrix.host }}/native/bin/cargo

      - name: Run rust-test test
        if: runner.os != 'Windows' # (disabled to save costs)
        shell: bash
        run: >
          SRC_DIR=$(pwd)
          HOST=${{ matrix.host }}
          python3 ./qa/zcash/full_test_suite.py rust-test

# not working in Windows (disabled to save costs)
  test-sec-hard:
    name: sec-hard tier ${{ matrix.tier }} platform ${{ matrix.platform }}
    needs: [setup, build]
    runs-on: ${{ matrix.test_os }}
    continue-on-error: ${{ matrix.tier != 1 }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.test_matrix) }}
    steps:
      - uses: actions/checkout@v4
        if: runner.os != 'Windows' # (disabled to save costs)

      - name: 'Set up Cloud SDK'
        if: runner.os != 'Linux' && runner.os != 'Windows' # (disabled to save costs)
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'

      - name: Download artifact
        if: runner.os != 'Windows' # (disabled to save costs)
        shell: bash
        run: |
          ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} ${{ format('src/zcash-inspect{0}', matrix.file_ext) }} ./src/

          ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} ${{ format('src/bench/bench_bitcoin{0}', matrix.file_ext) }} ./src/bench/

          ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} ${{ format('src/test/test_bitcoin{0}', matrix.file_ext) }} ./src/test/

          ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} ${{ format('src/zcashd-wallet-tool{0}', matrix.file_ext) }} ./src/

          ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} ${{ format('src/zcash-tx{0}', matrix.file_ext) }} ./src/

          ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} ${{ format('src/zcash-gtest{0}', matrix.file_ext) }} ./src/

          ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} ${{ format('src/zcashd{0}', matrix.file_ext) }} ./src/

          ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} ${{ format('src/zcash-cli{0}', matrix.file_ext) }} ./src/
          
      - name: Make artifact executable
        if: runner.os != 'Windows' # (disabled to save costs)
        run: |
          chmod +x ${{ format('./src/test/test_bitcoin{0}', matrix.file_ext) }}
          chmod +x ${{ format('./src/bench/bench_bitcoin{0}', matrix.file_ext) }}
          chmod +x ${{ format('./src/zcashd{0}', matrix.file_ext) }}
          chmod +x ${{ format('./src/zcash-cli{0}', matrix.file_ext) }}
          chmod +x ${{ format('./src/zcash-gtest{0}', matrix.file_ext) }}
          chmod +x ${{ format('./src/zcashd-wallet-tool{0}', matrix.file_ext) }}
          chmod +x ${{ format('./src/zcash-tx{0}', matrix.file_ext) }}

      - name: Run sec-hard test
        shell: bash
        if: runner.os != 'Windows' # (disabled to save costs)
        run: >
          SRC_DIR=$(pwd)
          HOST=${{ matrix.host }}
          python3 ./qa/zcash/full_test_suite.py sec-hard

# not working in Windows (disabled to save costs) and disabling in MacOS to save costs
  rpc-depends:
    name: RPC set up tier ${{ matrix.tier }} platform ${{ matrix.platform }}
    needs: [setup, build]
    runs-on: ${{ matrix.build_os }}
    continue-on-error: ${{ matrix.tier != 1 }}
    strategy:
      matrix:
        name: ${{ fromJson(needs.setup.outputs.test_names) }}
        include: ${{ fromJson(needs.setup.outputs.test_matrix) }}

    steps:
      - name: get python depends
        if: runner.os != 'Windows' && runner.os != 'macOS' # (disabled to save costs)
        run: |
          python3 -m venv ./venv
          source ./venv/bin/activate
          pip install simplejson zmq asyncio

      - uses: actions/cache/save@v3
        if: runner.os != 'Windows' && runner.os != 'macOS' # (disabled to save costs)
        name: cache-venv
        with:
          enableCrossOsArchive: true
          path: venv
          key: venv-${{ matrix.name }}

# not working in Windows (disabled to save costs) and disabling in MacOS to save costs
  rpc-test:
    name: RPC tests tier ${{ matrix.tier }} platform ${{ matrix.platform }} test ${{ matrix.rpc_tests }}
    needs: [setup, build, rpc-depends]
    runs-on: ${{ matrix.build_os }}
    continue-on-error: ${{ matrix.tier != 1 }}
    strategy:
      matrix:
        name: ${{ fromJson(needs.setup.outputs.rpc_test_names) }}
        rpc_tests : ${{ fromJson(needs.setup.outputs.rpc_tests) }}
        include: ${{ fromJson(needs.setup.outputs.rpc_test_matrix) }}
    steps:
      - uses: actions/checkout@v4
        if: runner.os != 'Windows' && runner.os != 'macOS' # (disabled to save costs)

      - uses: actions/cache/restore@v3
        name: cache-zcash-params
        if: runner.os != 'Windows' && runner.os != 'macOS' # (disabled to save costs)
        with:
          enableCrossOsArchive: true
          path: zcash-params
          key: zcash-params

      - uses: actions/cache/restore@v3
        if: runner.os != 'Windows' && runner.os != 'macOS' # (disabled to save costs)
        name: cache-venv
        with:
          enableCrossOsArchive: true
          path: venv
          key: venv-${{ matrix.name }}

      - name: 'Set up Cloud SDK'
        if: runner.os != 'Linux' && runner.os != 'Windows' && runner.os != 'macOS' # (disabled to save costs)
        uses: 'google-github-actions/setup-gcloud@v2'


      - name: Download artifact
        if: runner.os != 'Windows' && runner.os != 'macOS' # (disabled to save costs)
        shell: bash
        run: |
          ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} ${{ format('src/zcashd{0}', matrix.file_ext) }} ./src/

          ./.github/gcs-download-artifacts.sh ${{ secrets.GCP_SA_KEY }} ${{ github.run_id }}/${{ matrix.name }} ${{ format('src/zcash-cli{0}', matrix.file_ext) }} ./src/

      - name: Make artifact executable
        if: runner.os != 'Windows' && runner.os != 'macOS' # (disabled to save costs)
        run: |
          chmod +x ${{ format('./src/zcashd{0}', matrix.file_ext) }}
          chmod +x ${{ format('./src/zcash-cli{0}', matrix.file_ext) }}

      - name: Get Sprout parameters
        if: runner.os != 'Windows' && runner.os != 'macOS' # (disabled to save costs)
        uses: actions/cache/restore@v3
        with:
          enableCrossOsArchive: true
          path: zcash-params
          key: zcash-params

      - name: Setup zcash-params
        if: runner.os != 'Windows' && runner.os != 'macOS' # (disabled to save costs)
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            mv zcash-params "$APPDATA/ZcashParams"
          elif [ "${{ runner.os }}" == "macOS" ]; then
            mv zcash-params "$HOME/Library/Application Support/ZcashParams"
          elif [ "${{ runner.os }}" == "Linux" ]; then
            mv zcash-params "$HOME/.zcash-params"
          fi

      - name: RPC test ${{ matrix.rpc_tests }}
        if: runner.os != 'Windows' && runner.os != 'macOS' # (disabled to save costs)
        run: |
          cat <<EOF > ./subclass.py
          import subprocess
          import importlib
          import sys
          import os
          sys.path.append('qa/pull-tester')
          rpc_tests = importlib.import_module('rpc-tests')
          
          src_dir = os.environ["SRC_DIR"]
          build_dir = '.'
          exeext = ''
          
          class MyTestHandler(rpc_tests.RPCTestHandler):
              def start_test(self, args, stdout, stderr):
                  return subprocess.Popen(
                      args,
                      universal_newlines=True,
                      stdout=stdout,
                      stderr=stderr)
          
          test_list = ["${{ matrix.rpc_tests }}"]
          all_passed = rpc_tests.run_tests(MyTestHandler, test_list, src_dir, build_dir, exeext, jobs=len(test_list))
          if all_passed == False:
              sys.exit(1)
          EOF
          source ./venv/bin/activate
          ZCASHD=$(pwd)/${{ format('src/zcashd{0}', matrix.file_ext) }} SRC_DIR=$(pwd) python3 ./subclass.py
